@model Cinema.ViewModels.Genres.GenreDetailsViewModel

<div class="products-area-wrapper d-flex flex-column gridView m-0 justify-content-center align-items-start details">
    <div class="my-3 d-flex gap-3 align-items-center">
        <input value="@Model.Name" class="genre-input" />
        <button id="edit-button">
            <i class="fa-solid fa-pencil" title="Edit genre name"></i>
        </button>
        <div id="delete-button" class="d-flex flex-column align-items-center">
            <i class="fa-solid fa-trash-can" title="Delete genre"></i>
            <div class="delete-dropdown" hidden>
                <i class="confirm">Yes</i>
                <i class="deny">No</i>
            </div>
        </div>
    </div>
</div>
<div class="app-content-actions mt-1">
    <input id="search-bar" class="search-bar" placeholder="Search..." type="text">
</div>
<div class="products-area-wrapper movies-wrapper tableView">
    <div class="products-header">
        <div class="cinema-cell image">
            Movie
            <button class="sort-button" id="name-sort-desc" title="Sort descending">
                <i class="fa-solid fa-arrow-down"></i>
            </button>
            <button class="sort-button" id="name-sort" title="Sort ascending">
                <i class="fa-solid fa-arrow-up"></i>
            </button>
        </div>
        <div class="cinema-cell sales">
            Average user rating
            <button class="sort-button" id="rating-sort-desc" title="Sort descending">
                <i class="fa-solid fa-arrow-down"></i>
            </button>
            <button class="sort-button" id="rating-sort" title="Sort ascending">
                <i class="fa-solid fa-arrow-up"></i>
            </button>
        </div>
        <div class="cinema-cell stock">
            Ratings count
            <button class="sort-button" id="ratingcount-sort-desc" title="Sort descending">
                <i class="fa-solid fa-arrow-down"></i>
            </button>
            <button class="sort-button" id="ratingcount-sort" title="Sort ascending">
                <i class="fa-solid fa-arrow-up"></i>
            </button>
        </div>
    </div>
    <div class="movies-container" id="genre-movie-results-container">
    </div>
</div>
<div class="rating-container">
    <div id="modal" role="dialog" aria-modal="true" aria-labelledby="add-review-header" class="edit-modal">
        <button class="close-btn" aria-label="close" title="Close">x</button>
        <div id="review-form-container">
        </div>
    </div>
    <div class="modal-overlay"></div>
</div>
<script>
    var search = document.getElementById("search-bar");
    var activeSort = document.querySelector('.sort-button.selected');
    if (search) {
        let timeout = null;
        search.addEventListener("keyup", function () {
            clearTimeout(timeout);
            timeout = setTimeout(function () {
                $.ajax({
                    type: "GET",
                    url: `/Genres/SearchAndSortMoviesByGenre`,
                    data: { id: @Model.Id, searchText: search.value, sortBy: (activeSort ? activeSort.id : '') },
                    success: function (response) {
                        $("#genre-movie-results-container").html(response);
                    },
                    failure: function (response) {
                        alert(response.responseText);
                    },
                    error: function (response) {
                        alert(response.responseText);
                    }
                });
            }, 300);
        });
    }
    document.querySelectorAll(".sort-button").forEach(i => i.addEventListener('click', function () {
        var alreadyActive = document.querySelector('.sort-button.selected');
        if (alreadyActive) {
            alreadyActive.classList.remove("selected");
        }
        activeSort = i;
        i.classList.add("selected");
        $.ajax({
            type: "GET",
            url: `/Genres/SearchAndSortMoviesByGenre`,
            data: { id: @Model.Id, searchText: search.value, sortBy: (activeSort ? activeSort.id : '') },
            success: function (response) {
                $("#genre-movie-results-container").html(response);
            },
            failure: function (response) {
                alert(response.responseText);
            },
            error: function (response) {
                alert(response.responseText);
            }
        });
    }));
    document.getElementById('edit-button').addEventListener('click', function () {
        var input = document.querySelector('.genre-input');
        input.focus();

        $.ajax({
            type: "POST",
            url: `/Genres/EditGenre`,
            data: { genreId: @Model.Id, name: input.value },
            success: function (response) {
                window.location.href = response;
            },
            failure: function (response) {
                alert(response.responseText);
            },
            error: function (response) {
                alert(response.responseText);
            }
        });
    });
    document.getElementById('delete-button').addEventListener('mouseover', function () {
        document.querySelector('.delete-dropdown').removeAttribute('hidden');
    });
    document.getElementById('delete-button').addEventListener('click', function () {
        document.querySelector('.delete-dropdown').removeAttribute('hidden');
    });
    document.querySelector('.confirm').addEventListener('click', function () {
        $.ajax({
            type: "POST",
            url: `/Genres/DeleteGenre`,
            data: { genreId: @Model.Id},
            success: function (response) {
                window.location.href = response;
            },
            failure: function (response) {
                alert(response.responseText);
            },
            error: function (response) {
                alert(response.responseText);
            }
        });
    });
</script>
@*<script>
    window.onload = function () {
        getItems('Genres', 'SearchMoviesByActor', "", '@Model.Id');
    };
    var search = document.getElementById("search-bar");
    var activeSort = document.querySelector('.sort-button.selected');
    if (search) {
        let timeout = null;
        search.addEventListener("keyup", function () {
            clearTimeout(timeout);
            timeout = setTimeout(function () {
                getItems('Actors', 'SearchMoviesByActor', search.value, '@Model.Id', '', (activeSort ? activeSort.id : null));
            }, 300);
        });
    }

    document.querySelectorAll(".sort-button").forEach(i => i.addEventListener('click', function () {
        var alreadyActive = document.querySelector('.sort-button.selected');
        if (alreadyActive) {
            alreadyActive.classList.remove("selected");
        }
        i.classList.add("selected");
        getItems('Actors', 'SearchMoviesByActor', (search ? search.value : null), '@Model.Id', '', i.id);
    }));

    var modalContainer = document.getElementById('review-form-container');
    var popupModal = document.getElementById("modal");
    var editButton = document.getElementById("edit");
    editButton.addEventListener("click", function () {
        modalContainer.innerHTML = "";
        popupModal.classList.remove("preview");
        getUDpartial('Actors', 'EditActor', '@Model.Id');
    });

    var deleteButton = document.getElementById("delete");
    deleteButton.addEventListener("click", function () {
        modalContainer.innerHTML = "";
        popupModal.classList.remove("preview");
        getUDpartial('Actors', 'DeleteActor', '@Model.Id');
    });
</script>
<script src="~/js/ownerdashboard.js"></script>
<script src="~/js/rating-modal.js"></script>*@
